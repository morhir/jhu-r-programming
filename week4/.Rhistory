means
}
columnmean(airquality)
columnmean <- function(y){
nc <- ncol(y)
means <- numeric(nc)
for (i in 1:nc){
means[i] <- mean(y[, i])
}
means
}
columnmean(airquality)
setwd("~/repos/jhu-r-programming")
pwd
wd
columnmean(airquality)
columnmean <- function(y, removeNA = TRUE){
nc <- ncol(y)
means <- numeric(nc)
for (i in 1:nc){
means[i] <- mean(y[, i], na.rm = reomveNa)
}
means
}
columnmean(airquality)
columnmean <- function(y, removeNA = TRUE){
nc <- ncol(y)
means <- numeric(nc)
for (i in 1:nc){
means[i] <- mean(y[, i], na.rm = reomveNA)
}
means
}
columnmean(airquality)
columnmean <- function(y, removeNA = TRUE){
nc <- ncol(y)
means <- numeric(nc)
for (i in 1:nc){
means[i] <- mean(y[, i], na.rm = removeNA)
}
means
}
columnmean(airquality)
find.package("swirl")
install.packages("swirl")
library(swirl)
ls()
rm(list = ls())
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
c(1,1, 9 , 3.14)
info()
c(1.1, 9, 3.14)
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555)
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1,2,3,4) + c(0, 10)
c(1,2,3,4) + c(0,10,100)
z * 2 + 1000
my_div
swirl()
exit()
q()
swirl()
getwd()
ls()
x <- 9
ls()
ls()
play()
ls()
getwd()
nxt()
dir()
?list.files
play()
search()
nxt()
args(list.files())
args(list.files
)
old.dir <- getwd()
play()
old.dir
cd repo
dir()
nxt()
dir.create("testdir")
setwd("testdir")
file.create(myTest.R)
file.create("myTest.R")
fiel.create("mytest.R")
file.create("mytest.R")
ls
list.files()
file.exists("myTest.R")
infor()
info()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3")
file.copy("mytest2.R", "mytest3.R")
file.path(mytest3.R)
file.path("mytest3.R")
file.path("mytest3.R", folder1, folder2)
help()
info()
play()
nxt()
file.pathe('folder1', 'folder2')
file.path('folder1', 'folder2')
?dir.create
dir.create("testdir2", file.path("testdir2","testdir3"), recursive = TRUE)
dir.create(file.path("testdir2","testdir3"), recursive = TRUE)
play()
dir.create(file.path("testdir4","testdir10"))
list.dirs()
list.files()
file.remove("mytest3")
list.files()
unlintk('testdir2')
unlink('testdir2')
list.files()
nxt()
unlink("testdir2")
unlink("testdir2", rec = TRUE)
setwd(old.dir)
unlint
unlink("testdir", rep = TRUE)
unlink("testdir", re = TRUE)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10, by = 0.5)
my_seq <- seq(5,10, length = 30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
play()
?seq
nxt()
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2), times = 10)
rep(c(0,1,2), each = 10, times = 2)
rep(c(0,1,2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char("My", "name", "is")
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Alexander")
my_name
paste(my_name)
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
info()
skip()
info()
main()
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y,z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0 / 0
Inf - Inf
x
x[1:10]
x[is.na(x)]
x[!is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
play()
x[x > 0 & !is.na(x)]
nxt()
x[c(3,5,7)]
x[0]
x[3000]
x[-c(2,10)]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
names(1:10)
vect2 <- c (11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
identical
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
log-likelihood
columnmean <- function(y, removeNA = TRUE){
nc <- ncol(y)
means <- numeric(nc)
for (i in 1:nc){
means[i] <- mean(y[, i], na.rm = removeNA)
}
means
}
optim(columnmean)
make.NegLogLik <- function(data, fixed = c(FALSE, FALSE)){
params <- fixed
function(p){
params[!fixed] <- p
mu <- params[1]
sigma <- params[2]
a <- -0.5*length(data) * log (2 * pi * sigma ^2)
b <- -0.5 * sum ((data - mi) ^ 2) / (sigma ^2)
-(a + b)
}
}
set.seed(1); normals <- rnorm(100, 1, 2)
nLL <- make.NegLogLik(normals)
nLL
ls(environment(nLL))
optim(c(mi = 0, sigma = 1), nLL)$par
optim(c(mu = 0, sigma = 1), nLL)$par
make.NegLogLik <- function(data, fixed = c(FALSE, FALSE)){
params <- fixed
function(p){
params[!fixed] <- p
mu <- params[1]
sigma <- params[2]
a <- -0.5*length(data) * log (2 * pi * sigma ^2)
b <- -0.5 * sum ((data - mu) ^ 2) / (sigma ^2)
-(a + b)
}
}
optim(c(mu = 0, sigma = 1), nLL)$par
nLL <- make.NegLogLik(normals)
optim(c(mu = 0, sigma = 1), nLL)$par
nll <- make.NegLogLik(normals, c(FALSE, 2))
optimize(nll, c(-1,3))
optimize(nll, c(-1,3))$minimum
normals
optimize(nll, c(-1,3))$minimum
nll <- make.NegLokLik(normail, c(1,FALSE))
nll <- make.NegLogLik(normail, c(1,FALSE))
X <- seq(1,7, 1.9, len = 100)
X <- seq(1.7, 1.9, len = 100)
x <- seq(1.7, 1.9, len = 100)
y <- sapply(x, nll)
nll <- make.NegLokLik(normals, c(1,FALSE))
nll <- make.NegLogLik(normals, c(1,FALSE))
y <- sapply(x, nll)
plot(x, exp(-(y-min(y))), type = "l")
nll <- make.NegLogLik(normals, c(FALSE, 2))
x <- seq(0.5, 1.5, len= 100)
y <- sapply(x, nll)
plot(x, exp(-(y-min(y))), type = "l")
date.current
x <- as.Date("1970-01-01")
x
unclass(x)
unclass(as.Date("1970-01-02"))
unclass(as.Date("0000-00-00"))
unclass(as.Date("0001-01-01"))
POCIXct
POsIXct
POSIXct
x <- Sys.time()
x
p <- as.POSIXlt(X)
p <- as.POSIXlt(x)
names(unclass(p))
p
p$se
p$gmtoff
p$wday
p$yday
p$mday
unclass(x)
x$sec
datestring <- c("January 10, 2012, 10:40", "December 9, 2011 9:10")
x <- strptime(datestring, "%B %d, %Y %H:%M")
x
datestring
x <- strptime(datestring, "%B %d, %Y, %H:%M")
x
?strptime
datestring <- c("January 10, 2012 10:40", "December 9, 2011 9:10")
x <- strptime(datestring, "%B %d, %Y %H:%M")
x
x <- strptime(datestring[1], "%B %d, %Y %H:%M")
x <- strptime(datestring[1], "%B")
x
datestring[1]
strptime("January 10, 2012", "%B %d, %Y")
strptime("Jan 10, 2012", "%b %d, %Y")
strptime("Jan 10 2012", "%b %d %Y")
strptime("01 10 2012", "%m %d %Y")
strptime("Янв 10 2012", "%b %d %Y")
strptime("Января 10 2012", "%B %d %Y")
strptime("Январь 10 2012", "%B %d %Y")
datestring <- c("Январь 10, 2012 10:40", "Декабрь 9, 2011 9:10")
x <- strptime(datestring, "%B %d, %Y %H:%M")
x
class(x)
x <- as.Date("2012-01-01")
y <- strptime
y <- strptime("9 Янв 2011 11:34:21", "%d %b %Y %H:%M:%s")
y
y <- strptime("9 01\ 2011 11:34:21", "%d %m %Y %H:%M:%s")
y
y <- strptime("9 01\ 2011 11:34:21", "%d %m %Y %H:%M:%s")
y <- strptime("9 01 2011 11:34:21", "%d %m %Y %H:%M:%s")
y
y <- strptime("09.01.2011", "%d.%m.%Y")
y
y <- strptime("09 01 2011", "%d %m %Y")
y
y <- strptime("9 01 2011", "%d %m %Y")
y
y <- strptime("9 Янв 2011", "%d %b %Y")
y
y <- strptime("9 01 2011 11:34:21", "%d %m %Y %H:%M:%S")
Y
y
y <- strptime("9 Янв 2011 11:34:21", "%d %b %Y %H:%M:%S")
x - y
x <- as.POSIXlt(x)
x - y
q()
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
plot(x, y)
x
system.time(rnorm(10, 0, 20))
system.time(rnorm(100000000000, 0, 20))
system.time(rnorm(100000000000, 156165, 20564))
system.time(rnorm(1000000, 156165, 20564))
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
getwd
getwd()
path('adf', 'adf')
dir('adf', 'adf')
directory('adf', 'adf')
str dir()
str(dir())
str(dir
)
cd('\repos')
setwd('~\repos')
setwd("repos/")
dir()
setwd("jhu-r-programming/week4/")
dir()
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcome)
clear()
environment()
ncol(outcome)
nrow(outcome)
outcome[, 11] <- as.numeric(outcome[, 11])
hist(outcome[, 11])
head(outcome$Comparison.to.U.S..Rate...Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
head(outcome$Hospital.Name)
head(outcome$State)
outcome$State.find
outcome$State.find("PR")
swirl()
library(swirl)
rm(list = ls())
swirl()
ls()
class(plants)
dim(plants)
nrow(pl)
nrow(plants)
ncol(plants)
object.size(plants)
namse(plants)
names(plants)
head(plants)
head(plants)
head(plants, 10)
tail(plants)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
play()
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
table(outcome$State)
nxt()
str(outcome)
str(plants)
my_vector <- 1:20
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
0
rm(list = ls())
outcome <- read.csv("outcome-of-care-measures.csv", #
colClasses = "character")
head(split(outcome, outcome$State))
?lapply
?tapply
?mapply
?lapply
stop("eajfla")
(1,2,3,4)
c(1,2,3,4)
x = c(1,2,3,4)
?find
x.find(1)
class(x)
?numeric
?list
ls(x = 1)
ls(x[] = 1)
ls(x)
ls(x,1)
ls(x,'global')
x.rfind(1)
?rfind
??rfind
?index
match(1, x)
match(3, x)
match(x ,3 )
states <- outcome$State
matchStates <- match ("bla", states)
mstchStates
matchStates
matchStates <- match ('LA', states)
matchStates
is.na(match ("bla", states))
is.na(match ("NY", states))
names(outcome)
head(outcome$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
min(outcome$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
max(outcome$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
mean(outcome$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
ncol(outcome$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
names(outcome)
split(split(outcome, States)$LA, hospitals, drop = TRUE)
split(split(outcome, outcome$States)$LA, hospitals, drop = TRUE)
split(outcome, outcome$States)$LA
head(split(outcome, outcome$State)$LA)
source('best.R')
source('best.R')
best('LA', "pneumonia")
best('LA', "pneumonia")
match("pneumonia", "pneumonia")
if ("a" == "a") {x <- 4}
if ("ab" == "ab") {x <- 5}
source('best.R')
best('LA', "pneumonia")
best('LA', "pneumonia")
source('best.R')
best('LA', "pneumonia")
best('LA', "heart attack")
stateData <- split(outcome, outcome$State)$LA
state = 'NY'
stateData <- split(outcome, outcome$State)$NY
stateData <- split(outcome, outcome$State)$LA
stateData <- split(outcome, outcome$State)$state
?data.frame
